# Generated by Django 2.1.7 on 2020-02-22 01:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('max_score', models.IntegerField()),
                ('stars', models.FloatField()),
                ('ranked', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('logo', models.FileField(default='', null=True, upload_to='documents/%Y/%m/%d/')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=20)),
                ('total_point', models.IntegerField(default=0)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=20)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Game')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.IntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('starting_at', models.DateField(null=True)),
                ('finishing_at', models.DateField(null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Game')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=20)),
                ('picture', models.CharField(blank=True, max_length=30, null=True)),
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('hash', models.CharField(max_length=40)),
                ('sub_name', models.CharField(max_length=20)),
                ('song_author_name', models.CharField(max_length=20)),
                ('level_author_name', models.CharField(max_length=20)),
                ('bpm', models.FloatField()),
                ('played_count', models.BigIntegerField()),
                ('up_votes', models.BigIntegerField()),
                ('down_votes', models.BigIntegerField()),
                ('heat', models.FloatField()),
                ('rating', models.FloatField()),
                ('easy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='easy', to='League.Difficulty')),
                ('expert', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expert', to='League.Difficulty')),
                ('expert_plus', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expert_plus', to='League.Difficulty')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Game')),
                ('hard', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hard', to='League.Difficulty')),
                ('normal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='normal', to='League.Difficulty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('week_count', models.IntegerField(validators=[django.core.validators.MaxValueValidator(24), django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=20)),
                ('description', models.TextField()),
                ('starting_at', models.DateField(null=True)),
                ('playlist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='League.PlayList')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Season')),
            ],
        ),
        migrations.AddField(
            model_name='season',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Type'),
        ),
        migrations.AddField(
            model_name='score',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Song'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='songs',
            field=models.ManyToManyField(related_name='song_key', to='League.Song'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='League.Game'),
        ),
    ]
